name: Darshan Transport Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: '22.18.0'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps --ignore-scripts

    - name: Lint code (fail on warnings)
      run: npx eslint --config eslint.config.js "src/**/*.{ts,tsx,js,jsx}" --max-warnings=0

    - name: Build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  deployment:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Publish artifact for manual deployment
      uses: actions/upload-artifact@v4
      with:
        name: darshan-transport-frontend-dist
        path: dist/

  auto-deploy:
    name: Auto deploy to Windows VPS
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: [self-hosted, windows, x64, windows-vps]
    needs: deployment
    defaults:
      run:
        shell: powershell

    steps:
      - name: Download build artifact (dist)
        uses: actions/download-artifact@v4
        with:
          name: darshan-transport-frontend-dist
          path: ./artifact

      - name: Deploy to IIS folder (darshantransport-website)
        run: |
          $ErrorActionPreference = 'Stop'
          $source = (Resolve-Path '.\\artifact').Path
          $target = 'C:\inetpub\wwwroot\darshantransport-website'
          $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

          if (-not (Test-Path $source)) { throw "Source '$source' not found (artifact missing)." }
          if (-not (Test-Path (Join-Path $source 'index.html'))) { throw "Artifact folder missing index.html." }

          if (-not (Test-Path $target)) { New-Item -ItemType Directory -Force -Path $target | Out-Null }

          # Preserve existing web.config if present for cleanup phase
          $existingWebConfig = Join-Path $target 'web.config'
          $keepWebConfig = Test-Path $existingWebConfig

          # Clear target except web.config, with ACL fixup on failure
          $items = Get-ChildItem -Path $target -Force | Where-Object { -not ($keepWebConfig -and $_.Name -eq 'web.config') }
          foreach ($item in $items) {
            $removed = $false
            for ($i=0; $i -lt 3; $i++) {
              try {
                Remove-Item -LiteralPath $item.FullName -Recurse -Force -ErrorAction Stop
                $removed = $true
                break
              } catch {
                Write-Host "Remove failed for '$($item.FullName)': $($_.Exception.Message). Attempting ACL fix..."
                try {
                  takeown /f "$($item.FullName)" /r /d y | Out-Null
                  icacls "$($item.FullName)" /grant "Administrators:(OI)(CI)F" "NT AUTHORITY\SYSTEM:(OI)(CI)F" /T | Out-Null
                } catch { Write-Host "ACL fix failed for '$($item.FullName)': $($_.Exception.Message)" }
                Start-Sleep -Seconds 1
              }
            }
            if (-not $removed) { Write-Host "Warning: could not remove '$($item.FullName)'; continuing." }
          }

          # Conditional recycle: only if copy fails or web.config changed
          $srcCfg = Join-Path $source 'web.config'
          $dstCfg = Join-Path $target 'web.config'
          $cfgChanged = $false
          if ((Test-Path $srcCfg) -and (Test-Path $dstCfg)) {
            $cfgChanged = ((Get-FileHash $srcCfg).Hash -ne (Get-FileHash $dstCfg).Hash)
          } elseif (Test-Path $srcCfg -and -not (Test-Path $dstCfg)) {
            $cfgChanged = $true
          }

          # Preferred copy via robocopy (tolerates transient locks). Success exit codes: 0-7
          $null = (& robocopy $source $target /MIR /NFL /NDL /NJH /NJS /NP /R:2 /W:1)
          $rc = $LASTEXITCODE

          if ($rc -gt 7) {
            Write-Host "Robocopy failed with $rc, attempting recycle then retry..."
            if ($isAdmin) {
              try {
                Import-Module WebAdministration -ErrorAction Stop | Out-Null
                $pool = (Get-Item "IIS:\\Sites\\darshantransport-website" -ErrorAction Stop).applicationPool
                if ($pool) { Restart-WebAppPool -Name $pool -ErrorAction Stop }
              } catch { Write-Host "Recycle attempt failed: $($_.Exception.Message)" }
            } else {
              Write-Host "Not elevated; skipping IIS recycle."
            }
            $null = (& robocopy $source $target /MIR /NFL /NDL /NJH /NJS /NP /R:2 /W:1)
            if ($LASTEXITCODE -gt 7) { throw "Deploy failed after recycle. Robocopy exit code=$LASTEXITCODE" }
          }

          if ($cfgChanged -and $isAdmin) {
            try {
              Import-Module WebAdministration -ErrorAction Stop | Out-Null
              $pool = (Get-Item "IIS:\\Sites\\darshantransport-website" -ErrorAction Stop).applicationPool
              if ($pool) { Restart-WebAppPool -Name $pool -ErrorAction Stop }
            } catch { Write-Host "Post-copy recycle skipped: $($_.Exception.Message)" }
          } elseif ($cfgChanged -and -not $isAdmin) {
            Write-Host "web.config changed but not elevated; skipping recycle."
          }

      - name: Post-deploy smoke tests (HTTPS)
        run: |
          $ErrorActionPreference = 'Stop'
          $domain = 'www.darshantransport.com.np'

          function Test-OK($url) {
            try {
              $res = Invoke-WebRequest -UseBasicParsing -Uri $url -TimeoutSec 15
              if ($res.StatusCode -lt 200 -or $res.StatusCode -ge 400) { throw "Bad status $($res.StatusCode) for $url" }
              Write-Host "OK $url -> $($res.StatusCode)"
              return $true
            } catch {
              Write-Host "FAIL $url : $($_.Exception.Message)"
              return $false
            }
          }

          $ok1 = $false
          foreach ($u in @("https://$domain/","http://$domain/")) {
            if (Test-OK $u) { $ok1 = $true; break }
          }

          # Try proxy health endpoints (common variants); then fall back to direct backend health
          $ok2 = $false
          foreach ($p in @('/api/health','/api/v1/health')) {
            foreach ($scheme in @('https','http')) {
              if (Test-OK ("$scheme://$domain$p")) { $ok2 = $true; break }
            }
            if ($ok2) { break }
          }
          if (-not $ok2) {
            # Validate backend service is up directly
            $ok2 = Test-OK 'http://localhost:3000/health'
          }

          if (-not ($ok1 -and $ok2)) { throw "Smoke tests failed: site=$ok1 api=$ok2" }
