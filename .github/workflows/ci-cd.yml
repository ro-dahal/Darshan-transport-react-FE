name: Darshan Transport Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: '22.18.0'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps --ignore-scripts

    - name: Lint code (fail on warnings)
      run: npx eslint --config eslint.config.js "src/**/*.{ts,tsx,js,jsx}" --max-warnings=0

    - name: Build
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  deployment:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Publish artifact for manual deployment
      uses: actions/upload-artifact@v4
      with:
        name: darshan-transport-frontend-dist
        path: dist/

  auto-deploy:
    name: Auto deploy to Windows VPS
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: [self-hosted, windows, x64, windows-vps]
    needs: deployment
    defaults:
      run:
        shell: powershell

    steps:
      - name: Download build artifact (dist)
        uses: actions/download-artifact@v4
        with:
          name: darshan-transport-frontend-dist
          path: ./artifact

      - name: Deploy to IIS folder (darshantransport-website)
        run: |
          $ErrorActionPreference = 'Stop'
          $source = (Resolve-Path '.\\artifact').Path
          $target = 'C:\inetpub\wwwroot\darshantransport-website'

          if (-not (Test-Path $source)) { throw "Source '$source' not found (artifact missing)." }
          if (-not (Test-Path (Join-Path $source 'index.html'))) { throw "Artifact folder missing index.html." }

          if (-not (Test-Path $target)) { New-Item -ItemType Directory -Force -Path $target | Out-Null }

          # Try to stop app pool before mutating files to reduce locks
          $pool = $null
          try {
            Import-Module WebAdministration -ErrorAction Stop | Out-Null
            $site = Get-Item "IIS:\Sites\darshantransport-website" -ErrorAction Stop
            $pool = $site.applicationPool
            if ($pool) { Stop-WebAppPool -Name $pool -ErrorAction SilentlyContinue }
          } catch { Write-Host "IIS pre-stop skipped: $($_.Exception.Message)" }

          # Preserve existing web.config if present
          $existingWebConfig = Join-Path $target 'web.config'
          $keepWebConfig = Test-Path $existingWebConfig

          # Clear target except web.config, with ACL fixup on failure
          $items = Get-ChildItem -Path $target -Force | Where-Object { -not ($keepWebConfig -and $_.Name -eq 'web.config') }
          foreach ($item in $items) {
            $removed = $false
            for ($i=0; $i -lt 3; $i++) {
              try {
                Remove-Item -LiteralPath $item.FullName -Recurse -Force -ErrorAction Stop
                $removed = $true
                break
              } catch {
                Write-Host "Remove failed for '$($item.FullName)': $($_.Exception.Message). Attempting ACL fix..."
                try {
                  takeown /f "$($item.FullName)" /r /d y | Out-Null
                  icacls "$($item.FullName)" /grant "Administrators:(OI)(CI)F" "NT AUTHORITY\SYSTEM:(OI)(CI)F" /T | Out-Null
                } catch { Write-Host "ACL fix failed for '$($item.FullName)': $($_.Exception.Message)" }
                Start-Sleep -Seconds 1
              }
            }
            if (-not $removed) { Write-Host "Warning: could not remove '$($item.FullName)'; continuing." }
          }

          # Copy new build
          try {
            Copy-Item -Path (Join-Path $source '*') -Destination $target -Recurse -Force -ErrorAction Stop
          } catch {
            Write-Host "Copy-Item failed, attempting robocopy mirror..."
            $rc = (& robocopy $source $target /MIR /NFL /NDL /NJH /NJS /NP /R:2 /W:1 | Select-Object -Last 1)
            if ($LASTEXITCODE -gt 3) { throw "Robocopy failed with exit code $LASTEXITCODE. Output: $rc" }
          }

          # Recycle app pool for the site
          try {
            if (-not $pool) {
              Import-Module WebAdministration -ErrorAction Stop | Out-Null
              $site = Get-Item "IIS:\Sites\darshantransport-website" -ErrorAction Stop
              $pool = $site.applicationPool
            }
            if ($pool) {
              Start-WebAppPool -Name $pool -ErrorAction SilentlyContinue
            }
          } catch {
            Write-Host "IIS recycle skipped: $($_.Exception.Message)"
          }
